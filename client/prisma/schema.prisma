// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    description   String?
    MyStreams     Stream[]
    Viewing       Viewer[]  @relation("following")
    Viewers       Viewer[]  @relation("followers")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Viewer {
    id          String           @id @default(cuid())
    Viewer      User             @relation("following", fields: [viewerID], references: [id], onDelete: Cascade)
    viewerID    String
    Viewing     User             @relation("followers", fields: [viewingID], references: [id], onDelete: Cascade)
    viewingID   String
    isFollowing Boolean
    isBanned    Boolean
    isTimedOut  Viewer_TimeOuts?

    @@index([viewerID])
    @@index([viewingID])
}

model Viewer_TimeOuts {
    id     String   @id @default(cuid())
    Viewer Viewer   @relation(fields: [id], references: [id], onDelete: Cascade)
    Until  DateTime

    @@index([id])
}

model Stream {
    id      String        @id @default(cuid())
    User    User          @relation(fields: [userId], references: [id])
    userId  String
    name    String
    image   Bytes
    tags    Stream_Tags[]
    Genre   Genre?        @relation(fields: [genreId], references: [id])
    genreId String?

    @@index([userId])
    @@index([genreId])
}

model Stream_Tags {
    id     String  @id @default(cuid())
    Stream Stream  @relation(fields: [id], references: [id], onDelete: Cascade)
    Tags   Tags?   @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId  String?

    @@index([id])
    @@index([tagId])
}

model Tags {
    id           String        @id @default(cuid())
    tag          String
    used_streams Stream_Tags[]
    isBanned     Boolean
}

model Genre {
    id           String   @id @default(cuid())
    genre        String
    used_streams Stream[]
}
